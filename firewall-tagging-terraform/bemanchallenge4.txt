#############################################################################################################################################################
# Be A Man Challenge 4
# 1 VPC, 3 regions 2 Windows VMs, 2 Linux VMs
# Linux VM 1 is only accessible in Iowa | Linux VM 2 is only accessible in Sao Paulo | Create a third Linux VM, accessible in both Iowa and Sao Paulo
# Linux VM 1 == from "Be A Man wk 3" | Linux VM 2 == from "Be A Man wk 3" | Linux VM 3 == customized script, this time with a background image of your high school or college mascot, and a picture of your ideal house
# Firewall rules, including tagging policies | Connections to your RDP servers and the specified Linux servers | Certified students == github repo with walkthrough, in addition to screenshots
#############################################################################################################################################################
#### In Firewall Rules You Need SOURCE Range/Tag for the Subnet Incoming and TARGET Range/Tag for Reciving Subnet #######
###### Match Needed Resources In Terraform Registry ##### 



#VPC network
resource "google_compute_network" "mainvpc" {
  name                            = "mainvpc"
  routing_mode                    = "REGIONAL"
  auto_create_subnetworks         = false
  mtu                             = 1460
  delete_default_routes_on_create = false

}

#Firewall Rule
resource "google_compute_firewall" "rdptous" {
  name    = "rdptous"
  network = google_compute_network.mainvpc.name

  allow {
    protocol = "tcp"
    ports = ["3389"]
  }

  source_ranges = ["0.0.0.0/0"]
}
resource "google_compute_firewall" "allow-ssh" {
  name    = "allow-ssh"
  network = google_compute_network.mainvpc.name

  allow {
    protocol      = "tcp"
    ports         = ["22"]
  }

  allow {
    protocol      = "tcp"
    ports         = ["80"]
    
  }
    source_ranges = ["10.45.15.0/24"]
    destination_ranges = ["10.45.25.0/24"]
}

resource "google_compute_firewall" "allow-ssh1" {
  name    = "allow-ssh"
  network = google_compute_network.mainvpc.name

 allow {
    protocol      = "tcp"
    ports         = ["22"]
  }

  allow {
    protocol      = "tcp"
    ports         = ["80"]
    
  }

  source_ranges = ["10.45.25.0/24"]
  destination_ranges = ["10.45.35.0/24"]
}

#Subnet
resource "google_compute_subnetwork" "iowadusty" {
  name                     = "iowadusty"
  ip_cidr_range            = "10.45.15.0/24"
  region                   = "us-central1"
  network                  = google_compute_network.mainvpc.id
  private_ip_google_access = true
}
resource "google_compute_subnetwork" "scdusty" {
  name                     = "scdusty"
  ip_cidr_range            = "10.45.55.0/24"
  region                   = "us-central1"
  network                  = google_compute_network.mainvpc.id
  private_ip_google_access = true
}
resource "google_compute_subnetwork" "saopaulojermaine" {
  name                     = "saopaulojermaine"
  ip_cidr_range            = "10.45.25.0/24"
  region                   = "southamerica-east1"
  network                  = google_compute_network.mainvpc.id
  private_ip_google_access = true
}
resource "google_compute_subnetwork" "africajeffery" {
  name                     = "africajeffery"
  ip_cidr_range            = "10.45.35.0/24"
  region                   = "africa-south1"
  network                  = google_compute_network.mainvpc.id
  private_ip_google_access = true
}

#VM Instance
################################################
resource "google_compute_instance" "there" {
name = "iowadustyhq"
machine_type = "e2-small"
zone = "us-central1"
allow_stopping_for_update = true

boot_disk {
    initialize_params {
        image = "windows-cloud/windows-11"
 }
}
network_interface {
network = google_compute_network.mainvpc.name
subnetwork = google_compute_subnetwork.iowadusty.name
access_config {

    }
  }
  metadata_startup_script = file("${path.module}/startup.sh")
}
################################################
resource "google_compute_instance" "their" {
name = "useastdusty"
machine_type = "e2-small"
zone = "us-east1"
allow_stopping_for_update = true

boot_disk {
    initialize_params {
        image = "windows-cloud/windows-11"
 }
}
network_interface {
network = google_compute_network.mainvpc.name
subnetwork = google_compute_subnetwork.iowadusty.name
access_config {

    }
  }
  metadata_startup_script = file("${path.module}/startup.sh")
}
################################################
resource "google_compute_instance" "this" {
name = "saopaulohq"
machine_type = "e2-small"
zone = "southamerica-east1-b"
allow_stopping_for_update = true

boot_disk {
    initialize_params {
        image = "debian-cloud/debian-11"
 }
}
network_interface {
network = google_compute_network.mainvpc.name
subnetwork = google_compute_subnetwork.saopaulojermaine.name
access_config {

    }
  }
  metadata_startup_script = file("${path.module}/startup.sh")
}
################################################
resource "google_compute_instance" "that" {
name = "africahq"
machine_type = "e2-small"
zone = "africa-south1-b"
allow_stopping_for_update = true

boot_disk {
    initialize_params {
        image = "debian-cloud/debian-11"
 }
}
network_interface {
network = google_compute_network.mainvpc.name
subnetwork = google_compute_subnetwork.africajeffery.name
access_config {

    }
  }
  metadata_startup_script = file("${path.module}/startup.sh")
}